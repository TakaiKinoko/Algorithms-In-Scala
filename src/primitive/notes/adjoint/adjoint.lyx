#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble

\renewcommand{\vec}[1]{\mathbf{#1}}

\renewcommand{\labelenumi}{(\alph{enumi})}
\renewcommand{\labelenumii}{(\roman{enumii})}

\usepackage{bm}
\newcommand{\lam}{\boldsymbol{\lambda}}
\newcommand{\ps}{\boldsymbol{\psi}}

\usepackage{braket}

\date{Created Spring 2006, updated \today.}
\end_preamble
\use_default_options false
\language english
\inputencoding auto
\font_roman times
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 2
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\topmargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 2
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Notes on Adjoint Methods for 18.335
\end_layout

\begin_layout Author
Steven G.
 Johnson
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Given the solution 
\begin_inset Formula $\vec{x}$
\end_inset

 of a discretized PDE or some other set of 
\begin_inset Formula $M$
\end_inset

 equations parameterized by 
\begin_inset Formula $P$
\end_inset

 variables 
\begin_inset Formula $\vec{p}$
\end_inset

 (
\emph on
design parameters
\emph default
, a.k.a.
 
\emph on
control variables
\emph default
 or 
\emph on
decision parameters
\emph default
), we often wish to compute some function 
\begin_inset Formula $g(\vec{x},\vec{p})$
\end_inset

 based on the parameters and the solution.
 For example, if the PDE is a wave equation, we might want to know the scattered
 power in some direction.
 Or, for a mechanical simulation, we might want to know the load-bearing
 capacity of the structure.
 Or for a fluid, we might wish to know the flow rate somewhere.
 Often, however, we want to know more than just the 
\emph on
value
\emph default
 of 
\begin_inset Formula $g$
\end_inset

---we also want to know its 
\emph on
gradient
\emph default
 
\begin_inset Formula $\frac{dg}{d\vec{p}}$
\end_inset

.
 Adjoint methods give an efficient way to evaluate 
\begin_inset Formula $\frac{dg}{d\vec{p}}$
\end_inset

, with a cost 
\emph on
independent
\emph default
 of 
\begin_inset Formula $P$
\end_inset

 and usually comparable to the cost of solving for 
\begin_inset Formula $\vec{x}$
\end_inset

 
\emph on
once
\emph default
.
\end_layout

\begin_layout Standard
The gradient of 
\begin_inset Formula $g$
\end_inset

 with respect to 
\begin_inset Formula $\vec{p}$
\end_inset

 is extremely useful.
 It gives a measure of the 
\emph on
sensitivity
\emph default
 of our answer to the parameters 
\begin_inset Formula $\vec{p}$
\end_inset

 (which may, for example, come from some experimental measurements with
 some associated uncertainties).
 Or, we may want to perform an 
\emph on
optimization
\emph default
 of 
\begin_inset Formula $g$
\end_inset

, picking the 
\begin_inset Formula $\vec{p}$
\end_inset

 that produce some desired result; in this case the gradient indicates a
 useful search direction (e.g.
 for nonlinear conjugate-gradient optimization).
 For large-scale optimization problems, the number 
\begin_inset Formula $P$
\end_inset

 of design parameters can be hundreds, thousands, or more---this is common
 in 
\emph on
shape
\emph default
 or 
\emph on
topology optimization
\emph default
, in which 
\begin_inset Formula $\vec{p}$
\end_inset

 controls the placement and shape of arbitrary blobs of different materials
 constituting a given structure/design.
 Sometimes, this process is called 
\emph on
inverse design
\emph default
: finding the problem that yields a given solution instead of the other
 way around.
 When 
\begin_inset Formula $P\gg1$
\end_inset

, the amazing efficiency of adjoint methods makes inverse design possible.
\end_layout

\begin_layout Standard
I hadn't found any textbook description of adjoint methods that I particularly
 like, which is part of my motivation for writing up these notes.
 One introduction can be found in 
\begin_inset CommandInset citation
LatexCommand cite
key "Errico97"

\end_inset

, and a more general treatment can be found in 
\begin_inset CommandInset citation
LatexCommand cite
key "Cao03"

\end_inset

.
 Subsequently, Gil Strang wrote a nice introduction to adjoint methods in
 his book 
\begin_inset CommandInset citation
LatexCommand cite
key "Strang07"

\end_inset

, including a discussion of the important topic of automatic differentiation
 (for which adjoint or 
\begin_inset Quotes eld
\end_inset

reverse
\begin_inset Quotes erd
\end_inset

 differentiation is a key idea).
\end_layout

\begin_layout Section
Linear equations
\end_layout

\begin_layout Standard
Suppose that the column-vector 
\begin_inset Formula $\vec{x}$
\end_inset

 solves the 
\begin_inset Formula $M\times M$
\end_inset

 linear equation 
\begin_inset Formula $A\vec{x}=\vec{b}$
\end_inset

 where we take 
\begin_inset Formula $\vec{b}$
\end_inset

 and 
\begin_inset Formula $A$
\end_inset

 to be real
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This involves no loss of generality, since complex linear equations can
 always be written as real linear equations of twice the size by taking
 the real and imaginary parts as separate variables.
\end_layout

\end_inset

 and to depend in some way on 
\begin_inset Formula $\vec{p}$
\end_inset

.
 To evaluate the gradient directly, we would do 
\begin_inset Formula \[
\frac{dg}{d\vec{p}}=g_{\vec{p}}+g_{\vec{x}}\vec{x}_{\vec{p}}\]

\end_inset

 where the subscripts indicate partial derivatives (
\begin_inset Formula $g_{\vec{x}}$
\end_inset

 is a row vector, 
\begin_inset Formula $\vec{x}_{\vec{p}}$
\end_inset

 is an 
\begin_inset Formula $M\times P$
\end_inset

 matrix, etc.).
 Since 
\begin_inset Formula $g$
\end_inset

 is a given function, 
\begin_inset Formula $g_{\vec{p}}$
\end_inset

 and 
\begin_inset Formula $g_{\vec{x}}$
\end_inset

 are presumably easy to compute.
 On the other hand, computing 
\begin_inset Formula $\vec{x}_{\vec{p}}$
\end_inset

 is hard: evaluating it directly by differentiating 
\begin_inset Formula $A\vec{x}=\vec{b}$
\end_inset

 by a parameter 
\begin_inset Formula $p_{i}$
\end_inset

 gives 
\begin_inset Formula $\vec{x}_{p_{i}}=A^{-1}(\vec{b}_{p_{i}}-A_{p_{i}}\vec{x})$
\end_inset

.
 That is, we would have to solve an 
\begin_inset Formula $M\times M$
\end_inset

 linear equation for 
\begin_inset Formula $P$
\end_inset

 right-hand sides, once for every compont of 
\begin_inset Formula $\vec{p}$
\end_inset

; this is impractical if 
\begin_inset Formula $P$
\end_inset

 and 
\begin_inset Formula $M$
\end_inset

 are large.
\end_layout

\begin_layout Standard
More explicitly, the problematic term is: 
\begin_inset Formula \[
g_{\vec{x}}\vec{x}_{\vec{p}}=\underbrace{g_{\vec{x}}}_{1\times M}[\underbrace{A^{-1}}_{M\times M}\underbrace{(\vec{b}_{\vec{p}}-A_{\vec{p}}\vec{x})}_{M\times P}]=\underbrace{[g_{\vec{x}}A^{-1}]}_{1\times M}\underbrace{(\vec{b}_{\vec{p}}-A_{\vec{p}}\vec{x})}_{M\times P},\]

\end_inset

where 
\begin_inset Formula $A_{\vec{p}}\vec{x}$
\end_inset

 denotes the 
\begin_inset Formula $M\times P$
\end_inset

 matrix with columns 
\begin_inset Formula $A_{p_{i}}\vec{x}$
\end_inset

 for 
\begin_inset Formula $i=1,\ldots P$
\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Technically, 
\begin_inset Formula $A_{\vec{p}}$
\end_inset

 is a rank-3 tensor or 
\begin_inset Quotes eld
\end_inset

three-dimensional matrix,
\begin_inset Quotes erd
\end_inset

 although it almost certainly isn't stored this way.
 For example, 
\begin_inset Formula $A_{p_{i}}\vec{x}$
\end_inset

 could be computed for each 
\begin_inset Formula $i$
\end_inset

 separately without saving 
\begin_inset Formula $A_{p_{i}}$
\end_inset

.
 Often, 
\begin_inset Formula $A_{p_{i}}$
\end_inset

 will be very sparse.
\end_layout

\end_inset

 One way of looking at the difficulty is that in the first equation we multiply
 a 
\begin_inset Formula $M\times M$
\end_inset

 matrix by a 
\begin_inset Formula $M\times P$
\end_inset

 matrix, which costs 
\begin_inset Formula $O(M^{2}P)$
\end_inset

 work, or equivalently we have multiplications of 
\begin_inset Formula $A^{-1}$
\end_inset

 by 
\begin_inset Formula $P$
\end_inset

 vectors (i.e., solves of 
\begin_inset Formula $P$
\end_inset

 right-hand sides, which in practice would likely use a factorization of
 
\begin_inset Formula $A$
\end_inset

 or an iterative solver rather than explicitly computing 
\begin_inset Formula $A^{-1}$
\end_inset

).
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
If 
\begin_inset Formula $M$
\end_inset

 is sparse, then the cost might be significantly less than this 
\begin_inset Formula $O(M^{2}P)$
\end_inset

 upper bound, but in any case solving 
\begin_inset Formula $P$
\end_inset

 right-hand sides will be significantly more costly than solving a single
 right-hand side for the adjoint formulation.
\end_layout

\end_inset

 However, this can be ameliorated simply by 
\emph on
parenthesizing in a different way
\emph default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Strang07"

\end_inset

,
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Another way of looking at this, and the source of the 
\begin_inset Formula $\lam$
\end_inset

 notation, is to think of sort of a 
\begin_inset Quotes eld
\end_inset

Lagrange multiplier
\begin_inset Quotes erd
\end_inset

 process: replace 
\begin_inset Formula $g$
\end_inset

 with 
\begin_inset Formula $\tilde{g}=g-\lam^{T}\vec{f}$
\end_inset

 by adding a multiple 
\begin_inset Formula $\lam$
\end_inset

 of 
\begin_inset Formula $\vec{f}=0$
\end_inset

, and then choose 
\begin_inset Formula $\lam$
\end_inset

 is a clever way to cancel the annoying derivative term.
 This gives the same result, and may be easier to generalize to some more
 complicated circumstances, however, such as differential-algebraic equations
 
\begin_inset CommandInset citation
LatexCommand cite
key "Cao03"

\end_inset

.
\end_layout

\end_inset

 as shown in the last expression.
 If we multiply 
\begin_inset Formula $\lam^{T}=g_{\vec{x}}A^{-1}$
\end_inset

 first, that corresponds to only a 
\emph on
single
\emph default
 solution of an 
\emph on
adjoint equation
\begin_inset Foot
status open

\begin_layout Plain Layout
For complex-valued 
\begin_inset Formula $\vec{x}$
\end_inset

 and 
\begin_inset Formula $A$
\end_inset

 and real 
\begin_inset Formula $g$
\end_inset

, instead of the transpose 
\begin_inset Formula $A^{T}$
\end_inset

 one typically obtains the adjoint 
\begin_inset Formula $A^{\dagger}=A^{T*}$
\end_inset

 (the conjugate-transpose).
\end_layout

\end_inset


\emph default
 
\begin_inset Formula \begin{equation}
A^{T}\lam=g_{\vec{x}}^{T}.\label{eq:adjoint-eq-linear}\end{equation}

\end_inset

and then we multiply a 
\emph on
single
\emph default
 vector 
\begin_inset Formula $\lam^{T}$
\end_inset

 by our 
\begin_inset Formula $M\times P$
\end_inset

 matrix for only 
\begin_inset Formula $\theta(MP)$
\end_inset

 work.
 Putting it all together, we obtain: 
\begin_inset Formula \[
\left.\frac{dg}{d\vec{p}}\right|_{\vec{f}=0}=g_{\vec{p}}-\lam^{T}\vec{f}_{\vec{p}}=g_{\vec{p}}-\lam^{T}(A_{\vec{p}}\vec{x}-\vec{b}_{\vec{p}}).\]

\end_inset

 Again, 
\begin_inset Formula $A(\vec{p})$
\end_inset

 and 
\begin_inset Formula $\vec{b}(\vec{p})$
\end_inset

 are presumably specified analytically and thus 
\begin_inset Formula $A_{\vec{p}}$
\end_inset

 and 
\begin_inset Formula $\vec{b}_{\vec{p}}$
\end_inset

 can easily be computed (in some cases automatically, by automatic program
 differentiators such as ADIFOR).
 Note that the adjoint problem is of the same size as the original 
\begin_inset Formula $A\vec{x}=\vec{b}$
\end_inset

 system, can use the same factorization (e.g.
 LU factorization 
\begin_inset Formula $A=LU$
\end_inset

 immediately gives 
\begin_inset Formula $A^{T}=U^{T}L^{T}$
\end_inset

), has the same condition number, and has the same spectrum of eigenvalues
 (the eigenvalues of 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $A^{T}$
\end_inset

 are identical) so iterative algorithms will have similar performance (and
 can use similar preconditioners)---in every sense, solving the adjoint
 problem should be no harder than solving the original problem.
\end_layout

\begin_layout Section
Nonlinear equations
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $\vec{x}$
\end_inset

 satisfies some general, possibly nonlinear, equations 
\begin_inset Formula $\vec{f}(\vec{x},\vec{p})=0$
\end_inset

, the process is almost exactly the same.
 Differentiating the 
\begin_inset Formula $\vec{f}$
\end_inset

 equation, we find 
\begin_inset Formula $\vec{f}_{\vec{x}}\vec{x}_{\vec{p}}+\vec{f}_{\vec{p}}=0$
\end_inset

 and thus 
\begin_inset Formula $\vec{x}_{p}=-\vec{f}_{\vec{x}}^{-1}\vec{f}_{\vec{p}}$
\end_inset

.
 Hence, we write 
\begin_inset Formula \[
\frac{dg}{d\vec{p}}=g_{\vec{p}}+g_{\vec{x}}\vec{x}_{\vec{p}}=g_{\vec{p}}-\underbrace{g_{\vec{x}}}_{1\times M}[\underbrace{\vec{f}_{\vec{x}}^{-1}}_{M\times M}\underbrace{\vec{f}_{\vec{p}}}_{M\times P}]=g_{\vec{p}}-\underbrace{[g_{\vec{x}}\vec{f}_{\vec{x}}^{-1}]}_{1\times M}\underbrace{\vec{f}_{\vec{p}}}_{M\times P}.\]

\end_inset

 We solve for 
\begin_inset Formula $\vec{x}$
\end_inset

 by whatever method, then solve for 
\begin_inset Formula $\lam$
\end_inset

 from
\begin_inset Formula \begin{equation}
\vec{f}_{\vec{x}}^{T}\lam=\vec{g}_{\vec{x}}^{T},\label{eq:adjoint-eq}\end{equation}

\end_inset

 and finally obtain 
\begin_inset Formula \begin{equation}
\left.\frac{dg}{d\vec{p}}\right|_{\vec{f}=0}=g_{\vec{p}}-\lam^{T}\vec{f}_{\vec{p}}.\label{eq:adjoint-dg}\end{equation}

\end_inset

The only difference is that the adjoint equation (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:adjoint-eq"

\end_inset

) is not simply the adjoint of the equation for 
\begin_inset Formula $\vec{x}$
\end_inset

.
 Still, it is a single 
\begin_inset Formula $M\times M$
\end_inset

 linear equation for 
\begin_inset Formula $\lam$
\end_inset

 that should be of comparable (or lesser) difficulty to solving for 
\begin_inset Formula $\vec{x}$
\end_inset

.
\end_layout

\begin_layout Section
Eigenproblems
\end_layout

\begin_layout Standard
As a more complicated example illustrating the use of equations (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:adjoint-eq"

\end_inset

) and (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:adjoint-dg"

\end_inset

) from the previous sections, let us suppose that we are solving a linear
 eigenproblem 
\begin_inset Formula $A\vec{x}=\alpha\vec{x}$
\end_inset

 and looking at some function 
\begin_inset Formula $g(\vec{x},\alpha,\vec{p})$
\end_inset

.
 For simplicity, assume that 
\begin_inset Formula $A$
\end_inset

 is real-symmetric and that 
\begin_inset Formula $\alpha$
\end_inset

 is simple (non-degenerate; i.e., 
\begin_inset Formula $\vec{x}$
\end_inset

 is the only eigenvector for 
\begin_inset Formula $\alpha$
\end_inset

).
\begin_inset Foot
status open

\begin_layout Plain Layout
Problems involving degenerate eigenvalues occur surprisingly often in optimizati
on of eigenvalues (e.g.
 when maximizing the minimum eigenvalue of some system), and must be treated
 with special care.
 In that case, a generalization of the gradient is required to determine
 sensitivities or the steepest-descent direction 
\begin_inset CommandInset citation
LatexCommand cite
key "Seyranian94"

\end_inset

, a more elaborate version of what is called 
\emph on
degenerate perturbation theory
\emph default
 in quantum mechanics 
\begin_inset CommandInset citation
LatexCommand cite
key "Tannoudji77:pert"

\end_inset

.
\end_layout

\end_inset

 In this case, we now have 
\begin_inset Formula $M+1$
\end_inset

 unknowns described by the column vector: 
\begin_inset Formula \[
\tilde{\vec{x}}=\left(\begin{array}{c}
\vec{x}\\
\alpha\end{array}\right).\]

\end_inset

 The eigenequation 
\begin_inset Formula $\vec{f}=A\vec{x}-\alpha\vec{x}$
\end_inset

 only gives us 
\begin_inset Formula $M$
\end_inset

 equations and doesn't completely determine 
\begin_inset Formula $\tilde{\vec{x}}$
\end_inset

, for two reasons.
 First, of course, there are many possible eigenvalues, but let's assume
 that we have picked one in some fashion (e.g.
 the smallest 
\begin_inset Formula $\alpha$
\end_inset

, or the 
\begin_inset Formula $\alpha$
\end_inset

 closest to 
\begin_inset Formula $\pi$
\end_inset

, or the third largest 
\begin_inset Formula $|\alpha|$
\end_inset

, or ...).
 Second, the eigenequation does not determine the length 
\begin_inset Formula $|\vec{x}|$
\end_inset

; let's arbitrarily pick 
\begin_inset Formula $|\vec{x}|=1$
\end_inset

 or 
\begin_inset Formula $\vec{x}^{T}\vec{x}=1$
\end_inset

.
 This gives us 
\begin_inset Formula $M+1$
\end_inset

 equations 
\begin_inset Formula $\tilde{\vec{f}}=0$
\end_inset

 where:
\begin_inset Formula \[
\tilde{\vec{f}}=\left(\begin{array}{c}
\vec{f}\\
\vec{x}^{T}\vec{x}-1\end{array}\right).\]

\end_inset

 We'll need 
\begin_inset Formula $M+1$
\end_inset

 adjoint variables 
\begin_inset Formula $\tilde{\lam}$
\end_inset

: 
\begin_inset Formula \[
\tilde{\lam}=\left(\begin{array}{c}
\lam\\
\beta\end{array}\right).\]

\end_inset

 The adjoint equations (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:adjoint-eq"

\end_inset

) then give: 
\begin_inset Formula \begin{equation}
(A-\alpha)\lam=g_{\vec{x}}^{T}-2\beta\vec{x},\label{eq:A-alpha}\end{equation}

\end_inset


\begin_inset Formula \begin{equation}
-\vec{x}^{T}\lam=g_{\alpha}.\label{eq:lam-galpha}\end{equation}

\end_inset

 The first equation, at first glance, seems to be problematic: 
\begin_inset Formula $A-\alpha$
\end_inset

 is singular, with a null space of 
\begin_inset Formula $\vec{x}$
\end_inset

.
 It's, okay, though! First, we have to choose 
\begin_inset Formula $\beta$
\end_inset

 so that solutions of equation (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:A-alpha"

\end_inset

) 
\emph on
exist
\emph default
: the right-hand side must be orthogonal to 
\begin_inset Formula $\vec{x}$
\end_inset

 so that it is not in the null space of 
\begin_inset Formula $A-\alpha$
\end_inset

.
 That is, we must have 
\begin_inset Formula $\vec{x}^{T}(g_{\vec{x}}^{T}-2\beta\vec{x})=0$
\end_inset

, and thus 
\begin_inset Formula $\beta=\vec{x}^{T}g_{\vec{x}}^{T}/2$
\end_inset

 (since 
\begin_inset Formula $\vec{x}^{T}\vec{x}=1$
\end_inset

), and therefore 
\begin_inset Formula $\lam$
\end_inset

 satisfies: 
\begin_inset Formula \begin{equation}
(A-\alpha)\lam=(1-\vec{x}\vec{x}^{T})g_{\vec{x}}^{T}=Pg_{\vec{x}}^{T}\label{eq:eig-lambda}\end{equation}

\end_inset

 where 
\begin_inset Formula $P=1-\vec{x}\vec{x}^{T}$
\end_inset

 is the projection operator into the space orthogonal to 
\begin_inset Formula $\vec{x}$
\end_inset

.
 This equation then has a solution, and in fact it has infinitely many solutions
: we can add any multiple of 
\begin_inset Formula $\vec{x}$
\end_inset

 to 
\begin_inset Formula $\lam$
\end_inset

 and still have a solution.
 Equivalently, we can write 
\begin_inset Formula $\lam=\lam_{0}+\gamma\vec{x}$
\end_inset

 for 
\begin_inset Formula $\vec{x}^{T}\lam_{0}=0$
\end_inset

 and some 
\begin_inset Formula $\gamma$
\end_inset

.
 Fortunately, 
\begin_inset Formula $\gamma$
\end_inset

 is determined by (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:lam-galpha"

\end_inset

): 
\begin_inset Formula $\gamma=-g_{\alpha}$
\end_inset

.
 Finally, with 
\begin_inset Formula $\lam_{0}$
\end_inset

 determined by (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:eig-lambda"

\end_inset

),
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Since 
\begin_inset Formula $P$
\end_inset

 commutes with 
\begin_inset Formula $A-\alpha$
\end_inset

, we can solve for 
\begin_inset Formula $\lam_{0}$
\end_inset

 easily by an iterative method such as conjugate gradient: if we start with
 an initial guess orthogonal to 
\begin_inset Formula $\vec{x}$
\end_inset

, all subsequent iterates will also be orthogonal to 
\begin_inset Formula $\vec{x}$
\end_inset

 and will thus converge to 
\begin_inset Formula $\lam_{0}$
\end_inset

 (except for roundoff, which can be corrected by multiplying the final result
 by 
\begin_inset Formula $P$
\end_inset

).
\end_layout

\end_inset

 we can find the desired gradient via (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:adjoint-dg"

\end_inset

):
\begin_inset Formula \begin{equation}
\left.\frac{dg}{d\vec{p}}\right|_{\vec{f}=0}=g_{\vec{p}}-\lam^{T}A_{p}\vec{x}=g_{\vec{p}}-\lam_{0}^{T}A_{p}\vec{x}+g_{\alpha}\vec{x}^{T}A_{p}\vec{x}.\label{eq:adjoint-eig-dg}\end{equation}

\end_inset

 If we compare with 
\begin_inset Formula $\frac{dg}{d\vec{p}}=g_{\vec{p}}+g_{\vec{x}}\vec{x}_{\vec{p}}+g_{\alpha}\alpha_{\vec{p}}$
\end_inset

, we immediately see that 
\begin_inset Formula $\alpha_{\vec{p}}=\vec{x}^{T}A_{p}\vec{x}$
\end_inset

.
 This is a well-known result from quantum physics and perturbation theory,
 where it is known as the Hellman-Feynman theorem.
\end_layout

\begin_layout Section
Example inverse design
\end_layout

\begin_layout Standard
As a more concrete example of an inverse-design problem, let's consider
 the Schrodinger eigen-equation in one dimension, 
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\left[-\frac{d^{2}}{dx^{2}}+V(x)\right]\psi(x)=E\psi(x),\]

\end_inset

with periodic boundaries 
\begin_inset Formula $\psi(x+2)=\psi(x)$
\end_inset

.
 Normally, we take a given 
\begin_inset Formula $V(x)$
\end_inset

 and solve for 
\begin_inset Formula $\psi$
\end_inset

 and 
\begin_inset Formula $E$
\end_inset

.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename psi1.eps
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:psi1"

\end_inset

Optimized 
\begin_inset Formula $V(x)$
\end_inset

 (scaled by 1/1000) and 
\begin_inset Formula $\psi(x)$
\end_inset

 for 
\begin_inset Formula $\psi_{0}(x)=1+\sin[\pi x+\cos(3\pi x)]$
\end_inset

 after 500 cg iterations.
\end_layout

\end_inset


\end_layout

\end_inset

 Now, however, we will specify a particular 
\begin_inset Formula $\psi_{0}(x)$
\end_inset

 and find the 
\begin_inset Formula $V(x)$
\end_inset

 that gives 
\begin_inset Formula $\psi(x)\approx\psi_{0}(x)$
\end_inset

 for the ground-state eigenfunction (i.e.
 for the smallest eigenvalue 
\begin_inset Formula $E$
\end_inset

).
 In particular, we will find the 
\begin_inset Formula $V(x)$
\end_inset

 that minimizes 
\begin_inset Formula \[
g=\int_{-1}^{1}|\psi(x)-\psi_{0}(x)|^{2}dx.\]

\end_inset

 To solve this numerically, we will discretize the interval 
\begin_inset Formula $x\in[-1,1)$
\end_inset

 with 
\begin_inset Formula $M$
\end_inset

 equally-spaced points 
\begin_inset Formula $x_{n}=n\Delta x$
\end_inset

 (
\begin_inset Formula $\Delta x=\frac{2}{M+1}$
\end_inset

), and solve for the solution 
\begin_inset Formula $\psi(x_{n})$
\end_inset

 at these points, denoted by the vector 
\begin_inset Formula $\ps$
\end_inset

.
 That is, to compare with the notation of the previous sections, we have
 the eigenvector 
\begin_inset Formula $\vec{x}=\ps$
\end_inset

, the eigenvalue 
\begin_inset Formula $\alpha=E$
\end_inset

, and the parameters 
\begin_inset Formula $V(x_{n})$
\end_inset

 or 
\begin_inset Formula $\vec{p}=\vec{V}$
\end_inset

.
 If we discretize the eigenoperator with the usual center-difference scheme,
 we get 
\begin_inset Formula $A\ps=E\ps$
\end_inset

 for: 
\begin_inset Formula \[
A=\frac{1}{\Delta x^{2}}\left(\begin{array}{cccccc}
2 & -1 & 0 & \cdots & 0 & -1\\
-1 & 2 & -1 & 0 & \cdots\\
0 & -1 & 2 & -1 & 0 & \cdots\\
\vdots &  &  & \ddots\\
 &  &  & -1 & 2 & -1\\
-1 & 0 & \cdots & 0 & -1 & 2\end{array}\right)+\operatorname{diag}(\vec{V}).\]

\end_inset

 As before, we normalize 
\begin_inset Formula $\ps$
\end_inset

 (and 
\begin_inset Formula $\ps_{0}$
\end_inset

) to 
\begin_inset Formula $\ps^{T}\ps=1$
\end_inset

,
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
We also have an arbitrary choice of sign, which we fix by choosing 
\begin_inset Formula $\int\psi dx>0$
\end_inset

.
\end_layout

\end_inset

 giving a projection operator 
\begin_inset Formula $P=1-\ps\ps^{T}$
\end_inset

 (or 
\begin_inset Formula $P=1-\ket{\psi}\bra{\psi}$
\end_inset

, in Dirac notation).
 The discrete version of 
\begin_inset Formula $g$
\end_inset

 is now 
\begin_inset Formula \[
g(\ps,\vec{V})=(\ps-\ps_{0})^{T}(\ps-\ps_{0})\Delta x\]

\end_inset

 where 
\begin_inset Formula $\ps_{0}$
\end_inset

 is 
\begin_inset Formula $\psi_{0}(x_{n})$
\end_inset

, our target eigenfunction.
 Therefore, 
\begin_inset Formula $g_{\ps}=2(\ps-\ps_{0})^{T}\Delta x$
\end_inset

 and thus, by eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:eig-lambda"

\end_inset

), we find 
\begin_inset Formula $\lam$
\end_inset

 via: 
\begin_inset Formula \begin{equation}
(A-E)\lam=2P(\ps-\ps_{0})\Delta x,\label{eq:schro-lam}\end{equation}

\end_inset

with 
\begin_inset Formula $P\lam=0$
\end_inset

 (
\begin_inset Formula $\lam=\lam_{0}$
\end_inset

 since 
\begin_inset Formula $g_{E}=0)$
\end_inset

.
 
\begin_inset Formula $g_{\vec{V}}$
\end_inset

 and 
\begin_inset Formula $g_{E}$
\end_inset

 are both 0.
 Moreover, 
\begin_inset Formula $A_{V_{n}}$
\end_inset

 is simply the matrix with 
\begin_inset Formula $1$
\end_inset

 at 
\begin_inset Formula $(n,n)$
\end_inset

 and 
\begin_inset Formula $0$
\end_inset

's elsewhere, and thus from (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:adjoint-eig-dg"

\end_inset

): 
\begin_inset Formula \[
\frac{dg}{dV_{n}}=-\lambda_{n}\psi_{n}\]

\end_inset

 or equivalently 
\begin_inset Formula $\frac{dg}{d\vec{V}}=-\lam\odot\ps$
\end_inset

 where 
\begin_inset Formula $\odot$
\end_inset

 is the pointwise product (
\family typewriter
.*
\family default
 in Matlab).
\end_layout

\begin_layout Standard
Whew! Now how do we solve these equations numerically? This is illustrated
 by the Matlab function 
\family typewriter
schrodinger_fd_adj
\family default
 given below.
 We set up 
\begin_inset Formula $A$
\end_inset

 as a sparse matrix, then find the smallest eigenvalue and eigenvector via
 the 
\family typewriter
eigs
\family default
 function (which uses an iterative Arnoldi method).
 Then we solve (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:schro-lam"

\end_inset

) for 
\begin_inset Formula $\lam$
\end_inset

 via the Matlab 
\family typewriter
pcg
\family default
 function (preconditioned conjugate-gradient, although we don't bother with
 a preconditioner).
\end_layout

\begin_layout Standard
Then, given 
\begin_inset Formula $g$
\end_inset

 and 
\begin_inset Formula $\frac{dg}{d\vec{V}}$
\end_inset

, we then just plug it into some optimization algorithm.
 In particular, nonlinear conjugate gradient seems to work well for this
 problem.
\begin_inset Foot
status open

\begin_layout Plain Layout
I used the nonlinear conjugate-gradient Matlab 
\family typewriter
conj_grad
\family default
 routine from: 
\begin_inset Newline newline
\end_inset


\family typewriter

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hspace*{3em}
\end_layout

\end_inset

http://www2.imm.dtu.dk/~hbn/Software/
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Optimization results
\end_layout

\begin_layout Standard
In this section, we give a few example results from running the above procedure
 (nonlinear cg optimization) for 
\begin_inset Formula $M=100$
\end_inset

.
 As the starting guess for our optimization, we'll just use 
\begin_inset Formula $V(x)=0$
\end_inset

.
 That is, we are doing a 
\emph on
local optimization
\emph default
 in a 
\emph on
100-dimensional space
\emph default
, using the adjoint method to get the gradient.
 It is somewhat remarkable that this works---in a few seconds on a PC, it
 converges to a very good solution!
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename psi2.eps
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:psi2"

\end_inset

Optimized 
\begin_inset Formula $V(x)$
\end_inset

 (scaled by 1/10000) and 
\begin_inset Formula $\psi(x)$
\end_inset

 for 
\begin_inset Formula $\psi_{0}(x)=1-|x|$
\end_inset

 for 
\begin_inset Formula $|x|<0.5$
\end_inset

, after 5000 cg iterations.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We'll try a couple of example 
\begin_inset Formula $\psi_{0}(x)$
\end_inset

 functions.
 To start with, let's do 
\begin_inset Formula $\psi_{0}(x)=1+\sin[\pi x+\cos(3\pi x)]$
\end_inset

.
 (Note that the ground-state 
\begin_inset Formula $\psi$
\end_inset

 will never have any nodes, so we require 
\begin_inset Formula $\psi_{0}\geq0$
\end_inset

 everywhere.) This 
\begin_inset Formula $\psi_{0}(x)$
\end_inset

, along with the resulting 
\begin_inset Formula $\psi(x)$
\end_inset

 and 
\begin_inset Formula $V(x)$
\end_inset

 after 500 cg iterations, are shown in figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:psi1"

\end_inset

.
 The solution 
\begin_inset Formula $\psi(x)$
\end_inset

 matches 
\begin_inset Formula $\psi_{0}(x)$
\end_inset

 very well except for a couple of small ripples, and 
\begin_inset Formula $V(x)$
\end_inset

 is quite complicated---not something you could easily guess! 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename psi2n.eps
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:psi2n"

\end_inset

Optimized 
\begin_inset Formula $\psi(x)$
\end_inset

 for 
\begin_inset Formula $\psi_{0}(x)=1-|x|$
\end_inset

 for 
\begin_inset Formula $|x|<0.5$
\end_inset

, after various numbers of nonlinear conjugate-gradient iterations (from
 10 to 10000).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Oh, but that 
\begin_inset Formula $\psi_{0}$
\end_inset

 was too easy! Let's try one with discontinuities: 
\begin_inset Formula $\psi_{0}(x)=1-|x|$
\end_inset

 for 
\begin_inset Formula $|x|<0.5$
\end_inset

 and 
\begin_inset Formula $0$
\end_inset

 otherwise (which looks a bit like a 
\begin_inset Quotes eld
\end_inset

house
\begin_inset Quotes erd
\end_inset

).
 This 
\begin_inset Formula $\psi_{0}(x)$
\end_inset

, along with the resulting 
\begin_inset Formula $\psi(x)$
\end_inset

 and 
\begin_inset Formula $V(x)$
\end_inset

 after 500 cg iterations, are shown in figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:psi2"

\end_inset

.
 Amazingly, it still captures 
\begin_inset Formula $\psi_{0}$
\end_inset

 pretty well, although it has a bit more trouble with the discontinuities
 than with the slope discontinuity.
 This time, we let it converge for 5000 cg iterations to give it a bit more
 time.
 Was this really necessary? In figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:psi2n"

\end_inset

, we plot 
\begin_inset Formula $\psi(x)$
\end_inset

 for 10, 20, 40, 80, 160, 320, and 5000 cg iterations.
 It gets the rough shape pretty quickly, but the discontinuous features
 are converging fairly slowly.
 (Presumably this could be improved if we found a good preconditioner, or
 perhaps by a different optimization method or objective function.)
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Matlab code
\end_layout

\begin_layout Standard
The following code solves for 
\begin_inset Formula $g$
\end_inset

 and 
\begin_inset Formula $\frac{dg}{d\vec{V}}$
\end_inset

, not to mention the eigenfunction 
\begin_inset Formula $\ps$
\end_inset

 and the corresponding eigenvalue 
\begin_inset Formula $E$
\end_inset

, for a given 
\begin_inset Formula $\vec{V}$
\end_inset

 and 
\begin_inset Formula $\ps_{0}$
\end_inset

.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1pt"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "schrodinger_fd_adj.m"

\end_inset


\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Initial-value problems
\end_layout

\begin_layout Standard
So far, we have looked at 
\begin_inset Formula $\vec{x}$
\end_inset

 that are determined by 
\begin_inset Quotes eld
\end_inset

simple
\begin_inset Quotes erd
\end_inset

 algebraic equations (which may come from a PDE, etcetera).
 What if, instead, we are determining 
\begin_inset Formula $\vec{x}$
\end_inset

 by integrating a set of equations in 
\emph on
time
\emph default
? The simplest example of this is an initial-value problem for a linear,
 time-independent, homogeneous set of ODEs: 
\begin_inset Formula \[
\dot{\vec{x}}=B\vec{x}\]

\end_inset

 whose solution after a time 
\begin_inset Formula $t$
\end_inset

 for 
\begin_inset Formula $\vec{x}(0)=\vec{b}$
\end_inset

 is formally: 
\begin_inset Formula \[
\vec{x}=\vec{x}(t)=e^{Bt}\vec{b}.\]

\end_inset

 This, however, is exactly a linear equation 
\begin_inset Formula $A\vec{x}=\vec{b}$
\end_inset

 with 
\begin_inset Formula $A=e^{-Bt}$
\end_inset

, so we can just quote our results from earlier! That is, suppose we are
 optimizing (or evaluating the sensitivity) of some function 
\begin_inset Formula $g(\vec{x},\vec{p})$
\end_inset

 based on the solution 
\begin_inset Formula $\vec{x}$
\end_inset

 at time 
\begin_inset Formula $t$
\end_inset

.
 Then we find the adjoint vector 
\begin_inset Formula $\lam$
\end_inset

 via (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:adjoint-eq-linear"

\end_inset

): 
\begin_inset Formula \[
e^{-B^{T}t}\lam=g_{\vec{x}}^{T}.\]

\end_inset

 Equivalently, 
\begin_inset Formula $\lam$
\end_inset

 is the exactly the solution 
\begin_inset Formula $\lam(t)$
\end_inset

 after a time 
\begin_inset Formula $t$
\end_inset

 of its 
\emph on
own
\emph default
 adjoint ODE: 
\begin_inset Formula \[
\dot{\lam}=B^{T}\lam\]

\end_inset

 with initial condition 
\begin_inset Formula $\lam(0)=g_{\vec{x}}^{T}$
\end_inset

.
 We should have expected this by now: solving for 
\begin_inset Formula $\lam$
\end_inset

 always involves a task of similar complexity to finding 
\begin_inset Formula $\vec{x}$
\end_inset

, so if we found 
\begin_inset Formula $\vec{x}$
\end_inset

 by integrating an ODE then we find 
\begin_inset Formula $\lam$
\end_inset

 by an ODE too! Of course, we need not solve these ODEs by matrix exponentials;
 we can use Runge-Kutta, forward Euler, or (if 
\begin_inset Formula $B$
\end_inset

 comes from a PDE) whatever scheme we deem appropriate (e.g.
 Crank-Nicolson).
\end_layout

\begin_layout Standard
One important property to worry about is 
\emph on
stability
\emph default
, and here we are in luck.
 The eigenvalues of 
\begin_inset Formula $B$
\end_inset

 and 
\begin_inset Formula $B^{T}$
\end_inset

 are complex-conjugates, and so if one is stable (eigenvalues with absolute
 values 
\begin_inset Formula $\leq1$
\end_inset

) then the other is!
\end_layout

\begin_layout Standard
Finally, we can write down the gradient 
\begin_inset Formula $\frac{dg}{d\vec{p}}$
\end_inset

 via equation
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:adjoint-dg"

\end_inset

): 
\begin_inset Formula \[
\frac{dg}{d\vec{p}}=g_{\vec{p}}-\lam^{T}(A_{\vec{p}}\vec{x}-\vec{b}_{\vec{p}}).\]

\end_inset

 Now, since 
\begin_inset Formula $A=e^{-Bt}$
\end_inset

, one might be tempted to write 
\begin_inset Formula $A_{\vec{p}}=-B_{\vec{p}}t\cdot A$
\end_inset

, but this is not true except in the 
\emph on
very
\emph default
 special case where 
\begin_inset Formula $B_{\vec{p}}$
\end_inset

 commutes with 
\begin_inset Formula $B$
\end_inset

! Unfortunately, the general expression for differentiating a matrix exponential
 turns out to be more complicated: 
\begin_inset Formula $A_{\vec{p}}=-\int_{0}^{t}e^{-Bt'}B_{\vec{p}}e^{-B(t-t')}dt'$
\end_inset

, and so,
\begin_inset Formula \[
\frac{dg}{d\vec{p}}=g_{\vec{p}}+\int_{0}^{t}\lam^{T}(t-t')B_{\vec{p}}\vec{x}(t')dt'+\lam^{T}\vec{b}_{\vec{p}}.\]

\end_inset

 This is especially unfortunate because it usually means that we have to
 
\emph on
store
\emph default
 
\begin_inset Formula $\vec{x}(t')$
\end_inset

 at all times 
\begin_inset Formula $0\leq t'\leq t$
\end_inset

 in order to compute the integral.
 Adjoint methods are storage-intensive for time-dependent problems!
\end_layout

\begin_layout Standard
More generally, of course, one might wish to include time-varying 
\begin_inset Formula $A$
\end_inset

, nonlinearities, inhomogeneous (source) terms, etcetera, into the equations
 to integrate.
 A very general formulation of the problem, for differential-algebraic equations
 (DAEs), can be found in 
\begin_inset CommandInset citation
LatexCommand cite
key "Cao03"

\end_inset

.
 A similar general principle remains, however: the adjoint variable 
\begin_inset Formula $\lam$
\end_inset

 is determined by integrating a similar (adjoint) DAE, using the 
\emph on
final
\emph default
 value of 
\begin_inset Formula $\vec{x}(t)$
\end_inset

 to compute the 
\emph on
initial
\emph default
 condition of 
\begin_inset Formula $\lam(0)$
\end_inset

.
 In fact, the 
\begin_inset Formula $\lam(t)$
\end_inset

 equation is actually often interpreted as being integrated 
\emph on
backwards
\emph default
 in time from 
\begin_inset Formula $t$
\end_inset

 to 
\begin_inset Formula $0$
\end_inset

.
 Alternatively, one can consider a 
\begin_inset Quotes eld
\end_inset

discrete-time
\begin_inset Quotes erd
\end_inset

 situation of 
\emph on
recurrence
\emph default
 equations, in which case the adjoint problem is a recurrence 
\begin_inset Quotes eld
\end_inset

backward in time
\begin_inset Quotes erd
\end_inset

---see my online notes on adjoint methods for recurrences.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "adjoint,"
options "ieeetr"

\end_inset

 
\end_layout

\end_body
\end_document
